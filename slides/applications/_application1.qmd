## Exercice 1

:::{.callout-tip collapse="true" icon=false}
## Partie 0: vérification du bon fonctionnement du code

Un code **reproductible** est avant toute chose un code **fonctionnel** ! Repérez les **erreurs** qui empêchent le script script.R de s’exécuter correctement, et les **corriger**.

:::

## Exercice 1

:::{.callout-tip collapse="true" icon=false}
## Partie 2: premiers standards de qualité

:::{.incremental}
1. Installer les _packages_ `R` [`lintr`](https://github.com/r-lib/lintr) et [`styler`](https://github.com/r-lib/styler).
2. Définir le _linter_ à utiliser comme étant de type `tidyverse` : `lintr::use_lintr(type = "tidyverse")`
3. Diagnostiquer le script `script.R` à l'aide de `lintr` : `lintr::lint("script.R")`.
    + Regardez bien la liste des problèmes détectés par le _linter_.
    + Comprenez-vous la nature des problèmes?
4. Nettoyer le fichier à l'aide de `styler` : `styler::style_file("script.R")`.
    + Enregistrer et faire un _commit_ du fichier.
    + Prenez le temps de regarder le _diff_ du _commit_. Comprenez-vous les modifications faites par le _formatter_?
:::

:::

## Exercice 1

:::{.callout-tip collapse="true" icon=false}
## Application des standards de qualité de code (suite)

:::{.incremental}
1. Refaire tourner le _linter_. Il reste encore un certain nombre d'erreurs de formattage, car `styler` est un _formatter_ peu intrusif.
2. Regarder les différents problèmes repérés par le _linter_, et en corriger quelques uns (un pour chaque type de problème).
:::

:::

## Checkpoint

- [script.R](https://raw.githubusercontent.com/InseeFrLab/formation-bonnes-pratiques-R/main/R/checkpoints/application1/script.R)

## Application 1

:::{.callout-tip collapse="true" icon=false}
## Partie 1 : vérification du bon fonctionnement du code

Un code reproductible est avant toute chose un code fonctionnel ! Repérez les erreurs qui empêchent le script `script.R` de s’exécuter correctement, et les corriger.

:::

## Application 1

:::{.callout-tip collapse="true" icon=false}
## Partie 2 : premiers standards de qualité

:::{.incremental}
1. Installer les _packages_ `R` [`lintr`](https://github.com/r-lib/lintr) et [`styler`](https://github.com/r-lib/styler).
2. Définir le _linter_ à utiliser comme étant de type `tidyverse` : `lintr::use_lintr(type = "tidyverse")`
3. Diagnostiquer le script `script.R` : `lintr::lint("script.R")`.
    + Comprenez-vous la nature des problèmes détectés par le _linter_?
4. Appliquer le _`styler`_formatter_ au `script.R` : `styler::style_file("script.R")`.
    + Enregistrer et faire un _commit_ du fichier.
    + Prenez le temps de regarder le _diff_ du _commit_. Comprenez-vous les modifications faites par le _formatter_?
5. Refaire tourner le _linter_. Il reste encore un certain nombre d'erreurs de formattage, car `styler` est un _formatter_ peu intrusif.
6. Regarder les différents problèmes repérés par le _linter_, et en corriger quelques uns (un pour chaque type de problème).
:::

:::

## Checkpoint

- [script.R](https://raw.githubusercontent.com/InseeFrLab/formation-bonnes-pratiques-R/main/R/checkpoints/application1/script.R)

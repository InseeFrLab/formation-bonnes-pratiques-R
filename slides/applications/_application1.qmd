## Application 1

:::{.callout-tip collapse="true" icon=false}
## Partie 1 : vérification du bon fonctionnement du code

Un code reproductible est avant toute chose un code fonctionnel ! Repérez les erreurs qui empêchent le script `script.R` de s’exécuter correctement, et les corriger.

:::

## Application 1

:::{.callout-tip collapse="true" icon=false}
## Partie 2 : premiers standards de qualité

:::{.incremental}
1. Installer les _packages_ `R` [`lintr`](https://github.com/r-lib/lintr) et [`styler`](https://github.com/r-lib/styler).
2. Définir le _linter_ à utiliser comme étant de type `tidyverse` : `lintr::use_lintr(type = "tidyverse")`
3. Diagnostiquer le script `script.R` : `lintr::lint("script.R")`.
    + Comprenez-vous la nature des problèmes détectés par le _linter_?
4. Appliquer le _formatter_ au `script.R` : `styler::style_file("script.R")`.
5. Refaire tourner le _linter_. Il reste encore un certain nombre d'erreurs de formattage, car `styler` est un _formatter_ peu intrusif.
6. Regarder les différents problèmes repérés par le _linter_, et en corriger quelques uns (un pour chaque type de problème).
:::

:::

## Application 1

:::{.callout-tip collapse="true" icon=false}
## Partie 3 : une meilleure gestion des *packages* utilisés

:::{.incremental}
1. Limiter les ambiguités sur les *packages* en utilisant la syntaxe `package::fonction` pour les *packages* rarement utilisés dans le script.
2. L'installation des *packages* dans un script n'est pas une bonne pratique. Supprimer les instructions correspondantes.
3. Importer le `tidyverse` au complet est rarement utile. N'importer à la place que les *packages* effectivement utilisés dans le script.
:::

:::

## Application 1

:::{.callout-tip collapse="true" icon=false}
## Partie 4 : (auto-)documentation du code

:::{.incremental}
1. Déplacer les `library` pour les mettre tous ensemble au début du script.
2. Le script n'est pas construit dans un ordre logique. Déplacer les parties 
pour adopter une structure plus logique : 
    + Gestion de l'environnement -> Définition de fonctions -> Import des données -> Retraitement des données -> Statistiques descriptives -> Graphiques -> Modélisation
3. Donner des titres aux parties/sous-parties en utilisant les standards de documentation reconnus par RStudio :
    + `# TITRE NIVEAU 1 ------------` et `## TITRE NIVEAU 2 ==========`
:::

:::

## Application 1

:::{.callout-tip collapse="true" icon=false}
## Partie 5 : une meilleure gestion des [secrets]{.orange}

:::{.incremental style="margin-left: 30px;"}

1. Repérer le jeton d'API dans le code. Retirer le jeton d'API du code et créer à la racine du projet un fichier YAML nommé `secrets.yaml` où vous écrivez ce secret sous la forme `key: value`.
[:warning: Attention]{.red2} : le package `yaml` impose la création d'une ligne vierge à la fin du fichier pour être valide.
2. Dans `script.R`, importer ce YAML (avec `yaml::read_yaml("secrets.yaml")`) pour créer une variable `api_token` ayant cette valeur.
3. Ajouter dans `.gitignore` le fichier `secrets.yaml` et indiquer dans le `README.md` de votre projet que les secrets sont stockés dans ce fichier.
[:warning: Attention]{.red2} : il ne faut pas committer `secrets.yaml` car le jeton d'API est personnel et secret!

:::
  
:::

## Checkpoint

::: {layout=[30,70]}

- [script.R](https://raw.githubusercontent.com/InseeFrLab/formation-bonnes-pratiques-R/main/R/checkpoints/application1/script.R)

![](checkpoint.jpg){width=60%}
:::

:::{.callout-tip collapse="true" icon=false}
## Modélisation d'un projet sous forme de *pipeline* de données

:::{.incremental}
0. Installer le package `targets`.
1. Créer un fichier `_targets.R` à la racine du dépôt,
à partir de [l'exemple](https://books.ropensci.org/targets/walkthrough.html) dans la documentation.
2. Ajouter `_targets/` dans le `.gitignore`.
3. Reporter les `library` dans le fichier `R/functions.R` et
récupérer les noms des packages pour les mettre dans la section `tar_option_set()`.
4. Créer dans `R/functions.R` les fonctions `read_yaml_secret` et `read_from_parquet`:

  ```r
  read_yaml_secret <- function(path, key) {
    return(yaml::read_yaml(path)[[key]])
  }
  read_from_parquet <- function(path) {
    df <- arrow::read_parquet(
      path,
      col_select  = c(
        "region", "aemm", "aged", "anai", "catl", "cs1", "cs2", "cs3",
        "couple", "na38", "naf08", "pnai12", "sexe", "surf", "tp",
        "trans", "ur"
      )
    )
    return(df)
  }
  ```

:::

:::

## Application 6

:::{.callout-tip collapse="true" icon=false}
## Modélisation d'un projet sous forme de *pipeline* de données (suite)

:::{.incremental}

6. Créer les deux premières
cibles (_targets_): 
    + Créer `file_token` et `file_data` stockant les chemins de nos fichiers en entrée
    + Ne pas oublier l'argument `format = 'file'` dans `tar_target`
7. Créer les deux cibles suivantes `R`
    + Utiliser les fonctions `read_yaml_secret` (l'appeler `token`) et `read_from_parquet` (l'appeler `data`).
    + Pour `input_data`, utiliser l'argument `format = 'parquet'` dans `tar_target`.
7. Visualiser les relations entre objets de notre _pipeline_ à partir de `tar_visnetwork()`.
8. Exécuter `tar_make()` dans la console et observer le changement d'état avec `tar_visnetwork()`.
:::

:::

## Application 6

:::{.callout-tip collapse="true" icon=false}
## Modélisation d'un projet sous forme de *pipeline* de données (suite)

:::{.incremental}
9. Créer une fonction `produce_table_age` qui produit le tableau `gt` que vous avez créé précédemment
et intégrer sa production dans le _pipeline_ défini dans `_targets.R` (sous le nom `table_age`)
10. Exécuter `tar_make()` pour lancer le *pipeline* et analyser la sortie dans la console.
11. A l'aide de la fonction `tar_read`, visualiser la table des âges produite.
12. Modifier la fonction `produce_table_age` pour que la table affiche également le nombre de femmes
et d'hommes par tranche d'âge.
13. Exécuter `tar_make()` pour lancer le *pipeline* et analyser la sortie dans la console.
14. A l'aide de la fonction `tar_read`, vérifier que la table de sortie a bien été mise à jour.
:::

:::

## Checkpoint

- [functions.R](https://raw.githubusercontent.com/InseeFrLab/formation-bonnes-pratiques-R/main/R/checkpoints/application6/functions.R)

- [_targets.R](https://raw.githubusercontent.com/InseeFrLab/formation-bonnes-pratiques-R/main/R/checkpoints/application6/_targets.R)
